from telebot import TeleBot, types
from cfg.text_in_bot import *
from cfg.config import API_TOKEN, MAX_USER_IN_GAME

bot = TeleBot(API_TOKEN)
registration_data = {}  # chat_id: {'players': [usernames], 'msg_id': int}

# --- –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è Telegram ---
private_commands = [
    types.BotCommand("start", "üü¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
    types.BotCommand("help", "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
    types.BotCommand("rules", "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
    types.BotCommand("stats", "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
]
group_commands = [
    types.BotCommand("start_game", "üèÅ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
    types.BotCommand("join", "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"),
    types.BotCommand("leave", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"),
    types.BotCommand("begin", "üö© –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É –∏–≥—Ä—ã"),
    types.BotCommand("cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É"),
    types.BotCommand("top", "üîù –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞"),
]

bot.set_my_commands(private_commands, scope=types.BotCommandScopeAllPrivateChats())
bot.set_my_commands(group_commands, scope=types.BotCommandScopeAllGroupChats())

# ---- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É ----
@bot.message_handler(content_types=['new_chat_members'])
def greet_new_chat_members(message):
    for new_member in message.new_chat_members:
        if new_member.id == bot.get_me().id:
            bot.send_message(message.chat.id, start_text)

# ---- –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----
@bot.message_handler(commands=['start_game'])
def start_game(message):
    chat_id = message.chat.id
    if str(chat_id)[0] != "-":
        bot.send_message(chat_id, "‚öôÔ∏è| –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    registration_data[chat_id] = {'players': [], 'msg_id': None}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    text = get_registration_text(registration_data[chat_id]['players'])
    msg = bot.send_message(chat_id, text, reply_markup=markup)
    bot.pin_chat_message(chat_id, msg.message_id)
    registration_data[chat_id]['msg_id'] = msg.message_id

def get_registration_text(players):
    max_players = MAX_USER_IN_GAME
    text = f"üéÆ –ò–¥—ë—Ç –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!\n"
    text += f"–ò–≥—Ä–æ–∫–∏: {len(players)}/{max_players}\n"
    if players:
        text += "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join([f"- {name}" for name in players])
    else:
        text += "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
    text += "\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ '‚ùå –í—ã–π—Ç–∏'."
    return text

# ---- –ö–Ω–æ–ø–∫–∞ –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É ----
@bot.callback_query_handler(func=lambda call: call.data == "join_game")
def join_game(call):
    chat_id = call.message.chat.id
    user_name = call.from_user.first_name
    if chat_id not in registration_data:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
    if user_name in registration_data[chat_id]['players']:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    if len(registration_data[chat_id]['players']) >= MAX_USER_IN_GAME:
        bot.answer_callback_query(call.id, "–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤!")
        return
    registration_data[chat_id]['players'].append(user_name)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
    text = get_registration_text(registration_data[chat_id]['players'])
    bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
    bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")

# ---- –ö–Ω–æ–ø–∫–∞ –í—ã–π—Ç–∏ ----
@bot.callback_query_handler(func=lambda call: call.data == "leave_game")
def leave_game(call):
    chat_id = call.message.chat.id
    user_name = call.from_user.first_name
    if chat_id not in registration_data or user_name not in registration_data[chat_id]['players']:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ!")
        return
    registration_data[chat_id]['players'].remove(user_name)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
    text = get_registration_text(registration_data[chat_id]['players'])
    bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
    bot.answer_callback_query(call.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

# ---- –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----
@bot.message_handler(commands=['cancel'])
def cancel_registration(message):
    chat_id = message.chat.id
    if chat_id in registration_data:
        if registration_data[chat_id]['msg_id']:
            bot.unpin_chat_message(chat_id, registration_data[chat_id]['msg_id'])
        registration_data.pop(chat_id)
        bot.send_message(chat_id, "üö´ –ù–∞–±–æ—Ä –≤ –∏–≥—Ä—É –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# ---- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ----
@bot.message_handler(commands=['help'])
def handler_help(message):
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['rules'])
def handler_rules(message):
    bot.send_message(message.chat.id, rules_text)

@bot.message_handler(commands=['stats'])
def handler_stats(message):
    bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

@bot.message_handler(commands=['top'])
def handler_top(message):
    bot.send_message(message.chat.id, "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

@bot.message_handler(commands=['begin'])
def handler_begin(message):
    chat_id = message.chat.id
    if chat_id not in registration_data or not registration_data[chat_id]['players']:
        bot.send_message(chat_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return
    bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã –±—É–¥–µ—Ç —Ç—É—Ç)")
    # –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä–µ–ø–ª—è—Ç—å –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
    try:
        bot.unpin_chat_message(chat_id, registration_data[chat_id]['msg_id'])
    except Exception: pass
    registration_data.pop(chat_id, None)

@bot.message_handler(commands=['leave'])
def cmd_leave(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    if chat_id not in registration_data or user_name not in registration_data[chat_id]['players']:
        bot.send_message(chat_id, f"{user_name}, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
    else:
        registration_data[chat_id]['players'].remove(user_name)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
        markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
        text = get_registration_text(registration_data[chat_id]['players'])
        bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
        bot.send_message(chat_id, f"{user_name}, –≤—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

if __name__ == "__main__":
    bot.infinity_polling()
