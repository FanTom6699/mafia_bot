from telebot import TeleBot, types
from cfg.text_in_bot import *
from cfg.config import API_TOKEN, MAX_USER_IN_GAME

bot = TeleBot(API_TOKEN)
registration_data = {}  # chat_id: {'players': [user_ids], 'names': {user_id: name}, 'msg_id': int}

# Initialize game module with our bot instance
import game
game.set_bot_instance(bot)

private_commands = [
    types.BotCommand("start", "üü¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
    types.BotCommand("help", "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
    types.BotCommand("rules", "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
    types.BotCommand("stats", "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
]
group_commands = [
    types.BotCommand("start_game", "üèÅ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
    types.BotCommand("join", "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"),
    types.BotCommand("leave", "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"),
    types.BotCommand("begin", "üö© –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É –∏–≥—Ä—ã"),
    types.BotCommand("cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É"),
    types.BotCommand("top", "üîù –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞"),
]

bot.set_my_commands(private_commands, scope=types.BotCommandScopeAllPrivateChats())
bot.set_my_commands(group_commands, scope=types.BotCommandScopeAllGroupChats())

@bot.message_handler(commands=['start_game'])
def start_game(message):
    chat_id = message.chat.id
    if str(chat_id)[0] != "-":
        bot.send_message(chat_id, "‚öôÔ∏è| –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    registration_data[chat_id] = {'players': [], 'names': {}, 'msg_id': None}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    text = get_registration_text(registration_data[chat_id]['players'], registration_data[chat_id]['names'])
    msg = bot.send_message(chat_id, text, reply_markup=markup)
    bot.pin_chat_message(chat_id, msg.message_id)
    registration_data[chat_id]['msg_id'] = msg.message_id

def get_registration_text(players, names):
    max_players = MAX_USER_IN_GAME
    text = f"üéÆ –ò–¥—ë—Ç –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!\n"
    text += f"–ò–≥—Ä–æ–∫–∏: {len(players)}/{max_players}\n"
    if players:
        text += "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join([f"- {names[uid]}" for uid in players])
    else:
        text += "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
    text += "\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ '‚ùå –í—ã–π—Ç–∏'."
    return text

@bot.callback_query_handler(func=lambda call: call.data == "join_game")
def join_game(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    if chat_id not in registration_data:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
    if user_id in registration_data[chat_id]['players']:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    if len(registration_data[chat_id]['players']) >= MAX_USER_IN_GAME:
        bot.answer_callback_query(call.id, "–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤!")
        return
    registration_data[chat_id]['players'].append(user_id)
    registration_data[chat_id]['names'][user_id] = user_name
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
    text = get_registration_text(registration_data[chat_id]['players'], registration_data[chat_id]['names'])
    bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
    bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")

@bot.callback_query_handler(func=lambda call: call.data == "leave_game")
def leave_game(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if chat_id not in registration_data or user_id not in registration_data[chat_id]['players']:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ!")
        return
    registration_data[chat_id]['players'].remove(user_id)
    registration_data[chat_id]['names'].pop(user_id, None)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
    markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
    text = get_registration_text(registration_data[chat_id]['players'], registration_data[chat_id]['names'])
    bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
    bot.answer_callback_query(call.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

@bot.message_handler(commands=['help'])
def handler_help(message):
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['rules'])
def handler_rules(message):
    bot.send_message(message.chat.id, rules_text)

@bot.message_handler(commands=['stats'])
def handler_stats(message):
    from db.sqlite.repository import get_player_stats
    stats = get_player_stats(message.from_user.id)
    bot.send_message(message.chat.id, f"–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {stats['win']}, –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['lose']}")

@bot.message_handler(commands=['top'])
def handler_top(message):
    from db.sqlite.repository import get_top_players
    top = get_top_players()
    msg = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join([f"{p['name']}: {p['win']} –ø–æ–±–µ–¥" for p in top])
    bot.send_message(message.chat.id, msg)

@bot.message_handler(commands=['begin'])
def handler_begin(message):
    from game import start_new_game, check_player_count, table_chat
    chat_id = message.chat.id
    if chat_id not in registration_data or not registration_data[chat_id]['players']:
        bot.send_message(chat_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        return
    data = table_chat.open_json_file_and_write()
    if str(chat_id) not in data["chat_id"]:
        data["chat_id"][str(chat_id)] = {
            "players": {},
            "game_in_progress": False,
            "mafia": [],
            "don": None,
            "mute_users": [],
            "admins": []
        }
    for user_id in registration_data[chat_id]['players']:
        player_name = registration_data[chat_id]['names'][user_id]
        data["chat_id"][str(chat_id)]["players"][str(user_id)] = {
            "name": player_name,
            "roles": "",
            "last_active": 0
        }
    table_chat.save_json_file_and_write(data)
    if check_player_count(str(chat_id), data):
        start_new_game(str(chat_id))
        try:
            bot.unpin_chat_message(chat_id, registration_data[chat_id]['msg_id'])
        except Exception:
            pass
        registration_data.pop(chat_id, None)
    else:
        bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")

@bot.message_handler(commands=['leave'])
def cmd_leave(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    if chat_id not in registration_data or user_id not in registration_data[chat_id]['players']:
        bot.send_message(chat_id, f"{user_name}, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
    else:
        registration_data[chat_id]['players'].remove(user_id)
        registration_data[chat_id]['names'].pop(user_id, None)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîó –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É", callback_data="join_game"))
        markup.add(types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data="leave_game"))
        text = get_registration_text(registration_data[chat_id]['players'], registration_data[chat_id]['names'])
        bot.edit_message_text(text, chat_id, registration_data[chat_id]['msg_id'], reply_markup=markup)
        bot.send_message(chat_id, f"{user_name}, –≤—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('night_', 'vote_', 'mafia_vote_', 'comm_')))
def handle_game_callbacks(call):
    from game import handle_night_action_callback, handle_vote
    if call.data.startswith('vote_'):
        handle_vote(call)
    else:
        handle_night_action_callback(call)

@bot.message_handler(func=lambda message: message.chat.type == 'private' and not message.text.startswith('/'))
def handle_private_messages(message):
    from game import handle_mafia_chat_message
    handle_mafia_chat_message(message)

if __name__ == "__main__":
    bot.infinity_polling()
