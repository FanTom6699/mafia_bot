import threading
from time import time, sleep
import random
from telebot import types
from cfg.config import (MIN_USER_IN_GAME,
                        MAX_USER_IN_GAME, LOSE_MAFIA,
                        INACTIVITY_TIMEOUT, MARKUP_TG)
from db.sqlite.repository import DataBase
from db.sqlite.schema import TABLE_NAME_USERS, USERS_TABLE_CREATE
from db.json.dynamic_database import Json

table_chat = Json()
table_users = DataBase(TABLE_NAME_USERS, USERS_TABLE_CREATE)

# Bot instance will be injected from bot.py
bot = None

def set_bot_instance(bot_instance):
    global bot
    bot = bot_instance

def get_admins(chat_id):
    user_status = bot.get_chat_administrators(chat_id)
    user_admins = []
    for admins in user_status:
        user_admins.append(str(admins.user.id))
    return user_admins

def check_player_count(chat_id, data):
    if len(data["chat_id"][chat_id]["players"]) < MIN_USER_IN_GAME:
        bot.send_message(chat_id, f"‚öôÔ∏è| –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {MIN_USER_IN_GAME} –∏–≥—Ä–æ–∫–æ–≤.")
        return False
    elif len(data["chat_id"][chat_id]["players"]) > MAX_USER_IN_GAME:
        bot.send_message(chat_id, f"‚öôÔ∏è| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ - {MAX_USER_IN_GAME}.")
        return False
    return True

def get_role_description(role):
    """Get detailed role description"""
    descriptions = {
        '–î–æ–Ω': (
            "üëë –í—ã –î–æ–Ω –º–∞—Ñ–∏–∏! –í–∞—à –≥–æ–ª–æ—Å —Ä–µ—à–∞—é—â–∏–π –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –º–∞—Ñ–∏–∏.\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —á–∞—Ç –º–∞—Ñ–∏–∏ –∏ –ø—Ä–∞–≤–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."
        ),
        '–ú–∞—Ñ–∏—è': (
            "üî™ –í—ã —á–ª–µ–Ω –º–∞—Ñ–∏–∏! –í–∞—à–∏ —Ü–µ–ª–∏ ‚Äî –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —á–∞—Ç –º–∞—Ñ–∏–∏."
        ),
        '–ö–æ–º–∏—Å—Å–∞—Ä': (
            "üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã –∫–æ–º–∏—Å—Å–∞—Ä! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —Å—Ç—Ä–µ–ª—è—Ç—å –≤ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ—á–Ω–æ–µ –º–µ–Ω—é –≤ –õ–°."
        ),
        '–î–æ–∫—Ç–æ—Ä': (
            "üë®‚Äç‚öïÔ∏è –í—ã –¥–æ–∫—Ç–æ—Ä! –ú–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –Ω–æ—á—å –æ—Ç —É–±–∏–π—Å—Ç–≤–∞ –º–∞—Ñ–∏–∏.\n"
            "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Å—Ç–∏ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π."
        ),
        '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å': (
            "üë§ –í—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –Ω–∞–π—Ç–∏ –∏ –∏–∑–≥–Ω–∞—Ç—å –º–∞—Ñ–∏—é.\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö."
        ),
    }
    return descriptions.get(role, f'–í–∞—à–∞ —Ä–æ–ª—å: {role}')

def start_new_game(chat_id):
    data = table_chat.open_json_file_and_write()
    data["chat_id"][chat_id]["game_in_progress"] = True
    assign_roles(chat_id, data)
    
    # Send role descriptions and mafia composition
    mafia_composition = ""
    if data["chat_id"][chat_id]["mafia"]:
        mafia_names = []
        for mafia_id in data["chat_id"][chat_id]["mafia"]:
            player_name = data["chat_id"][chat_id]["players"][mafia_id]["name"]
            player_role = data["chat_id"][chat_id]["players"][mafia_id]["roles"]
            mafia_names.append(f"{player_name} ({player_role})")
        mafia_composition = "üî™ –°–æ—Å—Ç–∞–≤ –º–∞—Ñ–∏–∏:\n" + "\n".join(mafia_names)
    
    for player_id, role in data["chat_id"][chat_id]["players"].items():
        role_name = role["roles"]
        role_description = get_role_description(role_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
        bot.send_message(player_id, role_description)
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ ‚Äî –º–∞—Ñ–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –º–∞—Ñ–∏–∏
        if role_name in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
            bot.send_message(player_id, mafia_composition)
            if role_name == "–î–æ–Ω":
                bot.send_message(player_id, "üëë –ö–∞–∫ –î–æ–Ω, –≤–∞—à –≥–æ–ª–æ—Å —Ä–µ—à–∞—é—â–∏–π –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –º–∞—Ñ–∏–∏!")

    bot.send_message(chat_id, "üåÉ| –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–æ—á—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
    table_chat.save_json_file_and_write(data)
    start_night_phase(chat_id)

def calculate_role_balance(num_players):
    """Calculate role distribution based on player count"""
    if num_players < 5:
        return {}
    if 5 <= num_players <= 6:
        mafia_count = 2  # 1 Don + 1 Mafia
        commissioner = 1
        doctor = 1
    elif 7 <= num_players <= 9:
        mafia_count = 3  # 1 Don + 2 Mafia
        commissioner = 1
        doctor = 1
    else:  # 10+ players
        mafia_count = 4  # 1 Don + 3 Mafia
        commissioner = 1
        doctor = 1
    civilians = num_players - mafia_count - commissioner - doctor
    return {
        'don': 1,
        'mafia': mafia_count - 1,
        'commissioner': commissioner,
        'doctor': doctor,
        'civilian': civilians
    }

def assign_roles(chat_id, data):
    player_ids = list(data["chat_id"][chat_id]["players"].keys())
    random.shuffle(player_ids)
    num_players = len(player_ids)

    role_balance = calculate_role_balance(num_players)
    if not role_balance:
        return

    data["chat_id"][chat_id]["mafia"] = []
    data["chat_id"][chat_id]["don"] = None
    
    idx = 0
    if role_balance['don'] > 0:
        data["chat_id"][chat_id]["players"][player_ids[idx]]["roles"] = '–î–æ–Ω'
        data["chat_id"][chat_id]["mafia"].append(player_ids[idx])
        data["chat_id"][chat_id]["don"] = player_ids[idx]
        idx += 1
    for _ in range(role_balance['mafia']):
        data["chat_id"][chat_id]["players"][player_ids[idx]]["roles"] = '–ú–∞—Ñ–∏—è'
        data["chat_id"][chat_id]["mafia"].append(player_ids[idx])
        idx += 1
    for _ in range(role_balance['commissioner']):
        data["chat_id"][chat_id]["players"][player_ids[idx]]["roles"] = '–ö–æ–º–∏—Å—Å–∞—Ä'
        idx += 1
    for _ in range(role_balance['doctor']):
        data["chat_id"][chat_id]["players"][player_ids[idx]]["roles"] = '–î–æ–∫—Ç–æ—Ä'
        idx += 1
    for i in range(idx, num_players):
        data["chat_id"][chat_id]["players"][player_ids[i]]["roles"] = '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'
    table_chat.save_json_file_and_write(data)

def start_night_phase(chat_id):
    data = table_chat.open_json_file_and_write()
    data["chat_id"][chat_id]["night_actions"] = {'–ú–∞—Ñ–∏—è': {}, '–î–æ–∫—Ç–æ—Ä': None, '–ö–æ–º–∏—Å—Å–∞—Ä': None}
    data["chat_id"][chat_id]["mafia_votes"] = {}
    table_chat.save_json_file_and_write(data)
    bot.send_message(chat_id,
                     "üåÉ| –ú–∞—Ñ–∏—è, –î–æ–∫—Ç–æ—Ä –∏ –ö–æ–º–∏—Å—Å–∞—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.",
                     reply_markup=MARKUP_TG)
    for player_id in data["chat_id"][chat_id]["players"]:
        if player_id not in data["chat_id"][chat_id]["admins"]:
            bot.restrict_chat_member(chat_id, player_id,
                                     until_date=int(time()) + 3600)

    for player_id, role in data["chat_id"][chat_id]["players"].items():
        if role["roles"] in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω']:
            # Mafia voting interface
            markup = types.InlineKeyboardMarkup()
            for target_id, target_name in data["chat_id"][chat_id]["players"].items():
                if target_id != player_id and target_name["roles"] not in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω']:
                    markup.add(
                        types.InlineKeyboardButton(text=target_name['name'],
                                                   callback_data=f'mafia_vote_{target_id}_{chat_id}'))
            # –ú–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            bot.send_message(player_id, "üî™ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞. –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∂–µ—Ä—Ç–≤—É –≤ –º–µ–Ω—é!", reply_markup=markup)
            if role["roles"] == "–î–æ–Ω":
                bot.send_message(player_id, "üëë –ö–∞–∫ –î–æ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∂–µ—Ä—Ç–≤–µ –º–∞—Ñ–∏–∏ —ç—Ç–æ–π –Ω–æ—á—å—é.")
        elif role["roles"] == '–î–æ–∫—Ç–æ—Ä':
            markup = types.InlineKeyboardMarkup()
            for target_id, target_name in data["chat_id"][chat_id]["players"].items():
                markup.add(
                    types.InlineKeyboardButton(text=target_name['name'],
                                               callback_data=f'night_save_{target_id}_{chat_id}'))
            bot.send_message(player_id, "üíä –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Å—Ç–∏!", reply_markup=markup)
        elif role["roles"] == '–ö–æ–º–∏—Å—Å–∞—Ä':
            send_commissioner_menu(player_id, chat_id)
            bot.send_message(player_id, "üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞!")

def send_commissioner_menu(player_id, chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f'comm_check_menu_{chat_id}'),
        types.InlineKeyboardButton("üî´ –°—Ç—Ä–µ–ª—è—Ç—å", callback_data=f'comm_shoot_menu_{chat_id}')
    )
    bot.send_message(player_id, "üïµÔ∏è| –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def handle_mafia_vote_callback(call):
    data = table_chat.open_json_file_and_write()
    target_id = call.data.split('_')[2]
    chat_id = call.data.split('_')[3]
    voter_id = str(call.message.chat.id)
    data["chat_id"][chat_id]["mafia_votes"][voter_id] = target_id
    data["chat_id"][chat_id]["players"][voter_id]['last_active'] = time()
    target_name = data["chat_id"][chat_id]["players"][target_id]["name"]
    bot.send_message(voter_id, f"üî™| –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target_name}")
    table_chat.save_json_file_and_write(data)
    mafia_count = len(data["chat_id"][chat_id]["mafia"])
    if len(data["chat_id"][chat_id]["mafia_votes"]) == mafia_count:
        determine_mafia_target(chat_id)

def determine_mafia_target(chat_id):
    data = table_chat.open_json_file_and_write()
    votes = data["chat_id"][chat_id]["mafia_votes"]
    vote_counts = {}
    for target_id in votes.values():
        vote_counts[target_id] = vote_counts.get(target_id, 0) + 1
    max_votes = max(vote_counts.values()) if vote_counts else 0
    top_targets = [target_id for target_id, count in vote_counts.items() if count == max_votes]
    mafia_count = len(data["chat_id"][chat_id]["mafia"])
    don_id = data["chat_id"][chat_id]["don"]
    if len(top_targets) > 1 or mafia_count <= 2:
        if don_id and don_id in votes:
            final_target = votes[don_id]
        else:
            final_target = random.choice(top_targets) if top_targets else None
    else:
        final_target = top_targets[0] if top_targets else None
    data["chat_id"][chat_id]["night_actions"]['–ú–∞—Ñ–∏—è'] = final_target
    table_chat.save_json_file_and_write(data)
    if final_target:
        bot.send_message(final_target, "üî™ –≠—Ç–æ–π –Ω–æ—á—å—é –º–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ –≤–∞—Å —Å–≤–æ–µ–π —Ü–µ–ª—å—é...")

def handle_commissioner_menu_callback(call):
    action = call.data.split('_')[1]
    chat_id = call.data.split('_')[3]
    player_id = str(call.message.chat.id)
    data = table_chat.open_json_file_and_write()
    markup = types.InlineKeyboardMarkup()
    for target_id, target_name in data["chat_id"][chat_id]["players"].items():
        if target_id != player_id:
            callback_prefix = 'comm_check' if action == 'check' else 'comm_shoot'
            markup.add(
                types.InlineKeyboardButton(
                    text=target_name['name'],
                    callback_data=f'{callback_prefix}_{target_id}_{chat_id}'
                )
            )
    action_text = "üîé –ø—Ä–æ–≤–µ—Ä–∏—Ç—å" if action == 'check' else "üî´ –∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å"
    bot.send_message(player_id, f"üïµÔ∏è| –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è {action_text}:", reply_markup=markup)

def handle_commissioner_action_callback(call):
    data = table_chat.open_json_file_and_write()
    action_type = call.data.split('_')[1]
    target_id = call.data.split('_')[2]
    chat_id = call.data.split('_')[3]
    player_id = str(call.message.chat.id)
    data["chat_id"][chat_id]["players"][player_id]['last_active'] = time()
    target_name = data["chat_id"][chat_id]["players"][target_id]["name"]
    target_role = data["chat_id"][chat_id]["players"][target_id]["roles"]
    if action_type == 'check':
        # –ö–æ–º–∏—Å—Å–∞—Ä
        result_message = (
            "üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            "–†–æ–ª—å –∏–≥—Ä–æ–∫–∞:\n"
            f"{target_name} ‚Äî {target_role}"
        )
        bot.send_message(player_id, result_message)
        data["chat_id"][chat_id]["night_actions"]['–ö–æ–º–∏—Å—Å–∞—Ä'] = target_id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∏–≥—Ä–æ–∫
        checked_message = (
            "üïµÔ∏è‚Äç‚ôÇÔ∏è –≠—Ç–æ–π –Ω–æ—á—å—é –∫–æ–º–∏—Å—Å–∞—Ä –∑–∞—à—ë–ª –∫ –≤–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            "–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–∞ —Ä–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–µ–∫—Ä–µ—Ç –¥–ª—è –Ω–µ–≥–æ."
        )
        bot.send_message(target_id, checked_message)
    elif action_type == 'shoot':
        bot.send_message(player_id, f"üî´| –í—ã –∑–∞—Å—Ç—Ä–µ–ª–∏–ª–∏ {target_name}")
        if target_id not in data["chat_id"][chat_id]["admins"]:
            bot.restrict_chat_member(chat_id, target_id, until_date=int(time()) + 3600)
            data["chat_id"][chat_id]["mute_users"].append(target_id)
        table_users.update_data(target_id, "lose", 1)
        del data["chat_id"][chat_id]["players"][target_id]
        bot.send_message(chat_id, f"üî´| {target_name} –±—ã–ª –∑–∞—Å—Ç—Ä–µ–ª–µ–Ω –ö–æ–º–∏—Å—Å–∞—Ä–æ–º. –û–Ω –±—ã–ª {target_role}.")
        if target_role == "–î–æ–Ω":
            handle_don_succession(chat_id, data)
    table_chat.save_json_file_and_write(data)
    send_commissioner_menu(player_id, chat_id)

def handle_don_succession(chat_id, data):
    remaining_mafia = [mid for mid in data["chat_id"][chat_id]["mafia"] 
                      if mid in data["chat_id"][chat_id]["players"] 
                      and data["chat_id"][chat_id]["players"][mid]["roles"] == "–ú–∞—Ñ–∏—è"]
    if remaining_mafia:
        new_don = remaining_mafia[0]
        data["chat_id"][chat_id]["don"] = new_don
        data["chat_id"][chat_id]["players"][new_don]["roles"] = "–î–æ–Ω"
        for mafia_id in data["chat_id"][chat_id]["mafia"]:
            if mafia_id in data["chat_id"][chat_id]["players"]:
                player_name = data["chat_id"][chat_id]["players"][new_don]["name"]
                if mafia_id == new_don:
                    bot.send_message(mafia_id, f"üëë| –í—ã —Å—Ç–∞–ª–∏ –Ω–æ–≤—ã–º –î–æ–Ω–æ–º –º–∞—Ñ–∏–∏!")
                else:
                    bot.send_message(mafia_id, f"üëë| {player_name} —Å—Ç–∞–ª –Ω–æ–≤—ã–º –î–æ–Ω–æ–º –º–∞—Ñ–∏–∏!")

def handle_night_action_callback(call):
    data = table_chat.open_json_file_and_write()
    if call.data.startswith('mafia_vote_'):
        handle_mafia_vote_callback(call)
        return
    elif call.data.startswith('comm_check_menu_') or call.data.startswith('comm_shoot_menu_'):
        handle_commissioner_menu_callback(call)
        return
    elif call.data.startswith('comm_check_') or call.data.startswith('comm_shoot_'):
        handle_commissioner_action_callback(call)
        return
    action, target_id, chat_id = call.data.split('_')[1], call.data.split('_')[2], call.data.split('_')[3]
    player_id = str(call.message.chat.id)
    data["chat_id"][chat_id]["players"][player_id]['last_active'] = time()
    role = data["chat_id"][chat_id]["players"][player_id]["roles"]
    if role == '–î–æ–∫—Ç–æ—Ä' and action == 'save':
        data["chat_id"][chat_id]["night_actions"]['–î–æ–∫—Ç–æ—Ä'] = target_id
        bot.send_message(player_id, f"‚öôÔ∏è| –í—ã –≤—ã–±—Ä–∞–ª–∏ {data['chat_id'][chat_id]['players'][target_id]['name']}")
    table_chat.save_json_file_and_write(data)
    doctor_action = data["chat_id"][chat_id]["night_actions"]['–î–æ–∫—Ç–æ—Ä']
    mafia_action = data["chat_id"][chat_id]["night_actions"]['–ú–∞—Ñ–∏—è']
    if doctor_action is not None and mafia_action is not None:
        end_night_phase(chat_id)

def end_night_phase(chat_id):
    data = table_chat.open_json_file_and_write()
    kill_target = data["chat_id"][chat_id]["night_actions"]['–ú–∞—Ñ–∏—è']
    save_target = data["chat_id"][chat_id]["night_actions"]['–î–æ–∫—Ç–æ—Ä']
    check_target = data["chat_id"][chat_id]["night_actions"]['–ö–æ–º–∏—Å—Å–∞—Ä']
    kill_result = '–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª ‚ò†Ô∏è.'
    # –ö–æ–º–∏—Å—Å–∞—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∏–≥—Ä–æ–∫ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞—Å–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–æ–º
    if kill_target and kill_target == save_target:
        bot.send_message(kill_target, "üíä –≠—Ç–æ–π –Ω–æ—á—å—é –≤–∞—Å —Å–ø–∞—Å –¥–æ–∫—Ç–æ—Ä!")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –º–∞—Ñ–∏–µ–π
    if kill_target and kill_target != save_target:
        player_name = data["chat_id"][chat_id]["players"][kill_target]["name"]
        player_role = data["chat_id"][chat_id]["players"][kill_target]["roles"]
        kill_result = f'{player_name} –±—ã–ª —É–±–∏—Ç. –û–Ω –±—ã–ª {player_role}.'
        if kill_target not in data["chat_id"][chat_id]["admins"]:
            bot.restrict_chat_member(chat_id, kill_target, until_date=int(time()) + 3600)
            data["chat_id"][chat_id]["mute_users"].append(kill_target)
        table_users.update_data(kill_target, "lose", 1)
        if player_role == "–î–æ–Ω":
            handle_don_succession(chat_id, data)
        del data["chat_id"][chat_id]["players"][kill_target]
    bot.send_message(chat_id, kill_result)
    for player_id in data["chat_id"][chat_id]["players"]:
        if player_id not in data["chat_id"][chat_id]["admins"]:
            bot.restrict_chat_member(chat_id, player_id, can_send_messages=True, can_send_media_messages=True,
                                     can_send_other_messages=True, can_add_web_page_previews=True)
    table_chat.save_json_file_and_write(data)
    if check_win_condition(chat_id):
        start_day_phase(chat_id)

def handle_mafia_chat_message(message):
    player_id = str(message.from_user.id)
    data = table_chat.open_json_file_and_write()
    for chat_id in data["chat_id"]:
        if (data["chat_id"][chat_id]["game_in_progress"] and 
            player_id in data["chat_id"][chat_id]["players"] and
            data["chat_id"][chat_id]["players"][player_id]["roles"] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]):
            sender_name = data["chat_id"][chat_id]["players"][player_id]["name"]
            sender_role = data["chat_id"][chat_id]["players"][player_id]["roles"]
            for mafia_id in data["chat_id"][chat_id]["mafia"]:
                if mafia_id != player_id and mafia_id in data["chat_id"][chat_id]["players"]:
                    role_icon = "üëë" if sender_role == "–î–æ–Ω" else "üî™"
                    bot.send_message(mafia_id, f"{role_icon} {sender_name}: {message.text}")
            break

def start_day_phase(chat_id):
    data = table_chat.open_json_file_and_write()
    bot.send_message(chat_id, "üèôÔ∏è| –î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è. –î–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã.")
    sleep(60)
    for player_id, player_info in data["chat_id"][chat_id]["players"].items():
        markup = types.InlineKeyboardMarkup()
        for target_id, target_info in data["chat_id"][chat_id]["players"].items():
            if target_id != player_id:
                markup.add(
                    types.InlineKeyboardButton(text=target_info['name'], callback_data=f'vote_{target_id}_{chat_id}'))
        bot.send_message(player_id, "üì¢| –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ:", reply_markup=markup)
    bot.send_message(chat_id, "üì¢üí¨| –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ª—Å", reply_markup=MARKUP_TG)
    data["chat_id"][chat_id]["votes"] = {}
    table_chat.save_json_file_and_write(data)

def handle_vote(call):
    data = table_chat.open_json_file_and_write()
    voter_id = str(call.message.chat.id)
    target_id = call.data.split('_')[1]
    chat_id = call.data.split('_')[2]
    data["chat_id"][chat_id]["players"][voter_id]['last_active'] = time()
    data["chat_id"][chat_id]["votes"][voter_id] = target_id
    bot.send_message(voter_id, f"üì¢| –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {data['chat_id'][chat_id]['players'][target_id]['name']}")
    table_chat.save_json_file_and_write(data)
    if len(data["chat_id"][chat_id]["votes"]) == len(data['chat_id'][chat_id]['players']):
        end_day_phase(chat_id)

def end_day_phase(chat_id):
    data = table_chat.open_json_file_and_write()
    vote_counts = {}
    for target_id in data["chat_id"][chat_id]["votes"].values():
        if target_id in vote_counts:
            vote_counts[target_id] += 1
        else:
            vote_counts[target_id] = 1
    max_votes = max(vote_counts.values())
    to_eliminate = [target_id for target_id, count in vote_counts.items() if count == max_votes]
    if len(to_eliminate) == 1:
        eliminated_id = to_eliminate[0]
    else:
        eliminated_id = random.choice(to_eliminate)
    eliminated_role = data["chat_id"][chat_id]["players"][eliminated_id]["roles"]
    bot.send_message(chat_id,
                     f'üèÉüö™ {data["chat_id"][chat_id]["players"][eliminated_id]["name"]} –±—ã–ª –∏–∑–≥–Ω–∞–Ω. –û–Ω –±—ã–ª {eliminated_role}.')
    bot.send_message(eliminated_id, "üèÉüö™ –í–∞—Å –∏–∑–≥–Ω–∞–ª–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞. –ò–≥—Ä–∞ –¥–ª—è –≤–∞—Å –æ–∫–æ–Ω—á–µ–Ω–∞.")
    if eliminated_id not in data["chat_id"][chat_id]["admins"]:
        bot.restrict_chat_member(chat_id, eliminated_id, until_date=int(time()) + 3600)
        data["chat_id"][chat_id]["mute_users"].append(eliminated_id)
    table_users.update_data(eliminated_id, "lose", 1)
    if eliminated_role == "–î–æ–Ω":
        handle_don_succession(chat_id, data)
    del data["chat_id"][chat_id]["players"][eliminated_id]
    table_chat.save_json_file_and_write(data)
    if check_win_condition(chat_id):
        start_night_phase(chat_id)

def check_win_condition(chat_id):
    data = table_chat.open_json_file_and_write()
    mafia_count = sum(1 for role in data["chat_id"][chat_id]["players"].values() 
                     if role["roles"] in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω'])
    non_mafia_count = len(data["chat_id"][chat_id]["players"]) - mafia_count
    if mafia_count >= non_mafia_count:
        bot.send_message(chat_id, "üî™ü©∏ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –í—Å–µ –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
        for player_id, role in data["chat_id"][chat_id]["players"].items():
            if role["roles"] in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
                table_users.update_data(player_id, "win", 1)
        end_game(chat_id)
        return False
    elif mafia_count == LOSE_MAFIA:
        bot.send_message(chat_id, "üôé‚Äç‚ôÇÔ∏è –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏! –í—Å–µ –º–∞—Ñ–∏–æ–∑–∏ –∏–∑–≥–Ω–∞–Ω—ã.")
        for player_id, role in data["chat_id"][chat_id]["players"].items():
            if role["roles"] not in ["–ú–∞—Ñ–∏—è", "–î–æ–Ω"]:
                table_users.update_data(player_id, "win", 1)
        end_game(chat_id)
        return False
    return True

def monitor_inactivity():
    while True:
        data = table_chat.open_json_file_and_write()
        now = time()
        for chat_id in data["chat_id"]:
            if data["chat_id"][chat_id]["game_in_progress"]:
                for player_id, player_info in data["chat_id"][chat_id]["players"].items():
                    last_active = player_info.get('last_active')
                    if last_active and now - last_active > INACTIVITY_TIMEOUT:
                        end_game_due_to_inactivity(player_id, chat_id)
                        break
        sleep(60)

def end_game_due_to_inactivity(player_id, chat_id):
    data = table_chat.open_json_file_and_write()
    bot.send_message(chat_id,
                     f'‚öôÔ∏è| –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ {data["chat_id"][chat_id]["players"][player_id]["name"]}.')
    for user_id in data["chat_id"][chat_id]["mute_users"]:
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True,
                                 can_send_other_messages=True, can_add_web_page_previews=True)
    del data["chat_id"][chat_id]
    table_chat.save_json_file_and_write(data)

def end_game(chat_id):
    data = table_chat.open_json_file_and_write()
    for user_id in data["chat_id"][chat_id]["mute_users"]:
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True,
                                 can_send_other_messages=True, can_add_web_page_previews=True)
    del data["chat_id"][chat_id]
    table_chat.save_json_file_and_write(data)

def update_last_active(player_id, chat_id_user, message_id):
    data = table_chat.open_json_file_and_write()
    for chat_id in data["chat_id"]:
        if player_id in data["chat_id"][chat_id]["players"]:
            data["chat_id"][chat_id]["players"][player_id]['last_active'] = time()
            table_chat.save_json_file_and_write(data)
            return
    if chat_id_user in data["chat_id"] and data["chat_id"][chat_id_user]["game_in_progress"]:
        bot.delete_message(chat_id_user, message_id)
        if player_id not in data["chat_id"][chat_id_user]["admins"]:
            player_was_don = (player_id in data["chat_id"][chat_id_user]["players"] and 
                            data["chat_id"][chat_id_user]["players"][player_id]["roles"] == "–î–æ–Ω")
            bot.restrict_chat_member(chat_id_user, player_id,
                                     until_date=int(time()) + 3600)
            data["chat_id"][chat_id_user]["mute_users"].append(player_id)
            if player_was_don:
                handle_don_succession(chat_id_user, data)
            table_chat.save_json_file_and_write(data)

inactivity_thread = threading.Thread(target=monitor_inactivity, daemon=True)
inactivity_thread.start()
